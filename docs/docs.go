// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "fiber@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/cards/": {
            "get": {
                "description": "Get every cards. Shouldn't really be used",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Card"
                ],
                "summary": "get all cards",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Card"
                            }
                        }
                    }
                }
            }
        },
        "/v1/cards/deck/{deckID}": {
            "get": {
                "description": "Get every cards from a deck",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Card"
                ],
                "summary": "get a list of card",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Deck ID",
                        "name": "deckID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Card"
                            }
                        }
                    }
                }
            }
        },
        "/v1/cards/id/{id}": {
            "get": {
                "description": "Get a card by tech id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Card"
                ],
                "summary": "get a card",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Card ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Card"
                        }
                    }
                }
            }
        },
        "/v1/cards/new": {
            "post": {
                "description": "Create a new card",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Card"
                ],
                "summary": "create a card",
                "parameters": [
                    {
                        "description": "Card to create",
                        "name": "card",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Card"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/v1/cards/next": {
            "get": {
                "description": "Get next card",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Card"
                ],
                "summary": "get a card",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Card"
                        }
                    }
                }
            }
        },
        "/v1/cards/response": {
            "post": {
                "description": "Post a response and check it",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Card"
                ],
                "summary": "post a response",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/v1/cards/today": {
            "get": {
                "description": "Get next today card",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Card"
                ],
                "summary": "get a card",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Card"
                        }
                    }
                }
            }
        },
        "/v1/cards/{deckID}/next": {
            "get": {
                "description": "Get next card by deckID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Card"
                ],
                "summary": "get a card",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Card"
                        }
                    }
                }
            }
        },
        "/v1/decks": {
            "get": {
                "description": "Get every deck. Shouldn't really be used, consider using /v1/decks/public instead !",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deck"
                ],
                "summary": "get all decks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Deck"
                        }
                    }
                }
            }
        },
        "/v1/decks/available": {
            "get": {
                "description": "Get all public deck that you are not sub to",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deck"
                ],
                "summary": "get a list of deck",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Deck"
                            }
                        }
                    }
                }
            }
        },
        "/v1/decks/public": {
            "get": {
                "description": "Get all public deck",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deck"
                ],
                "summary": "get a list of deck",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Deck"
                            }
                        }
                    }
                }
            }
        },
        "/v1/decks/sub": {
            "get": {
                "description": "Get decks a user is sub to",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deck"
                ],
                "summary": "get a list of deck",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Deck"
                            }
                        }
                    }
                }
            }
        },
        "/v1/decks/{id}": {
            "get": {
                "description": "Get a deck by tech ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deck"
                ],
                "summary": "get a deck",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Deck ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "model"
                        }
                    }
                }
            }
        },
        "/v1/users": {
            "get": {
                "description": "Get all users.  Shouldn't really be used",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "get a list of user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                }
            }
        },
        "/v1/users/id/{id}": {
            "get": {
                "description": "Get an user by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "get an user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Card": {
            "type": "object",
            "properties": {
                "card_answer": {
                    "type": "string",
                    "example": "42"
                },
                "card_explication": {
                    "type": "string",
                    "example": "The number 42 is the answer to life has written in a very famous book"
                },
                "card_format": {
                    "type": "string",
                    "example": "Date / Name / Country"
                },
                "card_image": {
                    "description": "Should be an url",
                    "type": "string"
                },
                "card_question": {
                    "type": "string",
                    "example": "What's the answer to life ?"
                },
                "card_tips": {
                    "type": "string",
                    "example": "The answer is from a book"
                },
                "card_type": {
                    "type": "integer",
                    "example": 0
                },
                "deck": {
                    "$ref": "#/definitions/models.Deck"
                },
                "deck_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "models.Deck": {
            "type": "object",
            "properties": {
                "deck_banner": {
                    "type": "string",
                    "example": "A banner url"
                },
                "deck_description": {
                    "type": "string",
                    "example": "A simple demo deck"
                },
                "deck_name": {
                    "type": "string",
                    "example": "First Deck"
                },
                "deck_status": {
                    "description": "1: Draft - 2: Private - 3: Published",
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "user_avatar": {
                    "type": "string",
                    "example": "avatar url"
                },
                "user_bio": {
                    "type": "string",
                    "example": "A simple demo bio"
                },
                "user_name": {
                    "description": "This should be unique",
                    "type": "string",
                    "example": "Yume"
                },
                "user_permissions": {
                    "description": "0: User; 1: Mod; 2: Admin",
                    "type": "integer",
                    "example": 0
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:1813",
	BasePath:    "/api",
	Schemes:     []string{},
	Title:       "Memnix",
	Description: "This is a sample swagger for Fiber",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
