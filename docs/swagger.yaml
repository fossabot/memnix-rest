basePath: /v1
definitions:
  models.Card:
    properties:
      card_answer:
        example: "42"
        type: string
      card_case:
        type: boolean
      card_explication:
        type: string
      card_explication_image:
        type: string
      card_format:
        example: Date / Name / Country
        type: string
      card_image:
        description: Should be an url
        type: string
      card_question:
        example: What's the answer to life ?
        type: string
      card_spaces:
        type: boolean
      card_type:
        example: 0
        type: integer
      deck:
        $ref: '#/definitions/models.Deck'
      deck_id:
        example: 1
        type: integer
      mcq:
        $ref: '#/definitions/models.Mcq'
    type: object
  models.Deck:
    properties:
      deck_banner:
        example: A banner url
        type: string
      deck_code:
        example: "6452"
        type: string
      deck_description:
        example: A simple demo deck
        type: string
      deck_key:
        example: MEM
        type: string
      deck_lang:
        type: string
      deck_name:
        example: First Deck
        type: string
      deck_share:
        example: true
        type: boolean
      deck_status:
        description: '1: Draft - 2: Private - 3: Published'
        example: 2
        type: integer
    type: object
  models.LoginResponse:
    properties:
      message:
        type: string
      token:
        type: string
    type: object
  models.LoginStruct:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.Mcq:
    properties:
      deck:
        $ref: '#/definitions/models.Deck'
      deck_id:
        example: 1
        type: integer
      mcq_answers:
        type: string
      mcq_name:
        type: string
      mcq_type:
        type: integer
    type: object
  models.PublicUser:
    properties:
      user_avatar:
        example: avatar url
        type: string
      user_bio:
        example: A simple demo bio
        type: string
      user_name:
        type: string
      user_permissions:
        description: '0: User; 1: Mod; 2: Admin'
        example: 0
        type: integer
    type: object
  models.RegisterStruct:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  models.ResponseAuth:
    properties:
      message:
        type: string
      success:
        type: boolean
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.ResponseDeck:
    properties:
      card_count:
        example: 42
        type: integer
      deck:
        $ref: '#/definitions/models.Deck'
      deck_id:
        example: 1
        type: integer
      owner:
        $ref: '#/definitions/models.PublicUser'
      owner_id:
        example: 6
        type: integer
      permission:
        example: 1
        type: integer
      settings_today:
        type: boolean
    type: object
  models.User:
    properties:
      email:
        type: string
      user_avatar:
        example: avatar url
        type: string
      user_bio:
        example: A simple demo bio
        type: string
      user_name:
        description: This should be unique
        example: Yume
        type: string
      user_permissions:
        description: '0: User; 1: Mod; 2: Admin'
        example: 0
        type: integer
    type: object
host: http://192.168.1.151:1813/
info:
  contact:
    email: contact@memnix.app
    name: API Support
  description: Memnix API
  license:
    name: BSD 3-Clause License
    url: https://github.com/memnix/memnix-rest/blob/main/LICENSE
  termsOfService: https://github.com/memnix/memnix/blob/main/PRIVACY.md
  title: Memnix
  version: "1.0"
paths:
  /login:
    post:
      description: Login the user and return a fresh token
      parameters:
      - description: Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginStruct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Incorrect password or email
        "500":
          description: Internal error
      summary: logins user and return a fresh token
      tags:
      - Auth
  /logout:
    post:
      description: Logout the user and create a record in the log
      produces:
      - application/json
      responses:
        "200":
          description: Success
        "401":
          description: Forbidden
      security:
      - Beaver: []
      summary: logouts the user
      tags:
      - Auth
  /register:
    post:
      description: Create a new user
      parameters:
      - description: Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.RegisterStruct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: Forbidden
      summary: creates a new user
      tags:
      - Auth
  /user:
    get:
      description: Get connected user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseAuth'
        "401":
          description: Forbidden
      security:
      - Beaver: []
      summary: gets connected user
      tags:
      - Auth
  /v1/cards/:
    get:
      description: Get every card. Shouldn't really be used
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Card'
            type: array
      summary: gets all cards
      tags:
      - Card
  /v1/cards/{cardID}:
    delete:
      description: Delete a card
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: deletes a card
      tags:
      - Card
  /v1/cards/{cardID}/edit:
    put:
      consumes:
      - application/json
      description: Edit a card
      parameters:
      - description: card to edit
        in: body
        name: card
        required: true
        schema:
          $ref: '#/definitions/models.Card'
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: edits a card
      tags:
      - Card
  /v1/cards/{deckID}/training:
    get:
      description: Get training cards
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Card'
            type: array
      summary: gets a list of cards
      tags:
      - Card
  /v1/cards/deck/{deckID}:
    get:
      description: Get every card from a deck
      parameters:
      - description: Deck ID
        in: path
        name: deckID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Card'
            type: array
      summary: gets a list of card
      tags:
      - Card
  /v1/cards/id/{id}:
    get:
      description: Get a card by tech id
      parameters:
      - description: Card ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Card'
      summary: gets a card
      tags:
      - Card
  /v1/cards/new:
    post:
      consumes:
      - application/json
      description: Create a new card
      parameters:
      - description: Card to create
        in: body
        name: card
        required: true
        schema:
          $ref: '#/definitions/models.Card'
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: creates a card
      tags:
      - Card
  /v1/cards/response:
    post:
      consumes:
      - application/json
      description: Post a response and check it
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: posts a response
      tags:
      - Card
  /v1/cards/selfresponse:
    post:
      consumes:
      - application/json
      description: Post a self evaluated response
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: posts a response
      tags:
      - Card
  /v1/cards/today:
    get:
      description: Get all today card
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Card'
            type: array
      summary: gets a list of card
      tags:
      - Card
  /v1/decks:
    get:
      description: Get every deck. Shouldn't really be used, consider using /v1/decks/public
        instead !
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Deck'
      summary: gets all decks
      tags:
      - Deck
  /v1/decks/{deckID}:
    delete:
      description: Delete a deck
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: delete a deck
      tags:
      - Deck
    get:
      description: Get a deck by tech ID
      parameters:
      - description: Deck ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: model
      summary: get a deck
      tags:
      - Deck
  /v1/decks/{deckID}/edit:
    put:
      consumes:
      - application/json
      description: Edit a deck
      parameters:
      - description: Deck to edit
        in: body
        name: deck
        required: true
        schema:
          $ref: '#/definitions/models.Deck'
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: edits a deck
      tags:
      - Deck
  /v1/decks/{deckID}/publish:
    post:
      consumes:
      - application/json
      description: Request to publish deck
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: publishes a deck
      tags:
      - Deck
  /v1/decks/{deckID}/subscribe:
    post:
      consumes:
      - application/json
      description: Subscribe to a deck
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: sub deck
      tags:
      - Deck
  /v1/decks/{deckID}/unsubscribe:
    post:
      consumes:
      - application/json
      description: Unsubscribe to a deck
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: unsub deck
      tags:
      - Deck
  /v1/decks/{deckID}/users:
    get:
      description: Get all the sub users to a deck
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: gets a list of users
      tags:
      - Deck
  /v1/decks/available:
    get:
      description: Get all public deck that you are not sub to
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ResponseDeck'
            type: array
      summary: get a list of deck
      tags:
      - Deck
  /v1/decks/editor:
    get:
      description: Get decks the user is an editor
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ResponseDeck'
            type: array
      summary: gets a list of deck
      tags:
      - Deck
  /v1/decks/new:
    post:
      consumes:
      - application/json
      description: Create a new deck
      parameters:
      - description: Deck to create
        in: body
        name: deck
        required: true
        schema:
          $ref: '#/definitions/models.Deck'
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: creates a deck
      tags:
      - Deck
  /v1/decks/private/{key}/{code}/subscribe:
    post:
      consumes:
      - application/json
      description: Subscribe to a private deck
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: sub deck
      tags:
      - Deck
  /v1/decks/public:
    get:
      description: Get all public deck
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Deck'
            type: array
      summary: gets a list of deck
      tags:
      - Deck
  /v1/decks/sub:
    get:
      description: Get decks a user is sub to
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ResponseDeck'
            type: array
      summary: gets a list of deck
      tags:
      - Deck
  /v1/mcqs/{deckID}:
    get:
      description: Get mcqs linked to the deck
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Mcq'
            type: array
      summary: gets a list of mcqs
      tags:
      - Mcq
  /v1/mcqs/{mcqID}:
    delete:
      description: Delete a mcq
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: deletes a mcq
      tags:
      - Mcq
  /v1/mcqs/{mcqID}/edit:
    put:
      consumes:
      - application/json
      description: Edit a mcq
      parameters:
      - description: mcq to edit
        in: body
        name: mcq
        required: true
        schema:
          $ref: '#/definitions/models.Mcq'
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: edits a mcq
      tags:
      - Mcq
  /v1/mcqs/new:
    post:
      consumes:
      - application/json
      description: Create a new mcq
      parameters:
      - description: Mcq to create
        in: body
        name: mcq
        required: true
        schema:
          $ref: '#/definitions/models.Mcq'
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: creates a mcq
      tags:
      - Mcq
  /v1/users:
    get:
      description: Get all users.  Shouldn't really be used
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: gets a list of user
      tags:
      - User
  /v1/users/config/{deckId}/today:
    get:
      description: Set the today config for a deck
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: gets a user
      tags:
      - User
  /v1/users/id/{id}:
    get:
      description: Get a user by ID.
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: gets a user
      tags:
      - User
securityDefinitions:
  Beaver:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
